clusterExport(cl, list("f_forecast_var", "log_returns_sp500",
"log_returns_fste100",
"window_size",
"level",
"solnp",
"f_ineq_constraint",
"f_nll",
"ComputeHtGarch","store"))
VaR_forecast_sp500 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("SP500 windows ",i)
f_forecast_var(log_returns_sp500[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
VaR_forecast_fste100 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("FSTE100 windows ",i)
f_forecast_var(log_returns_fste100[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
stopCluster(cl)
VaR_forecast_sp500_vector <- unlist(VaR_forecast_sp500)
dates <- index(log_returns_sp500)[window_size:(window_size + number_of_windows - 1)]
VaR_forecast_sp500_xts <- xts(VaR_forecast_sp500_vector, order.by = dates)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
lines(returns, col = 'red', lwd = 2)
lines(returns, col = 'red')
lines(returns, col = 'red')
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
# I want to change the names of the x-axis to the dates
axis(1, at=1:number_of_windows, labels=as.Date(dates), las=2)
# I want to change the names of the x-axis to the dates
axis(1, at=1:number_of_windows, labels=as.Date(dates), las=2)
# I want to change the names of the x-axis to the dates
axis(1, at=1:number_of_windows, labels=as.Date(dates), las=2)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
# I want to change the names of the x-axis to the dates
axis(1, at=1:number_of_windows, labels=as.Date(dates), las=2)
legend("topright", legend=c("VaR Forecast","Returns"), col=c("blue","red"), lty=1:1, cex=0.8)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
# Adding a legend
legend("topright",           # Position of the legend
legend = c("VaR Forecast", "Returns"),  # Labels for the lines
col = c("blue", "red"), # Color of the labels
lty = 1)                # Line type, 1 = solid
lines(returns, col = 'red')
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
# Adding a legend
legend("topright",           # Position of the legend
legend = c("VaR Forecast", "Returns"),  # Labels for the lines
col = c("blue", "red"), # Color of the labels
lty = 1)                # Line type, 1 = solid
lines(returns, col = 'red')
# I want to change the names of the x-axis to the dates
axis(1, at=1:number_of_windows, labels=as.Date(dates), las=2)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("topright",           # Position of the legend
legend = c("VaR Forecast", "Returns"),  # Labels for the lines
col = c("blue", "red"), # Color of the labels
lty = 1)                # Line type, 1 = solid
library("parallel")
library("Rsolnp")
cl <- makeCluster(detectCores() - 2) # Leave 2 cores free for system processes
clusterExport(cl, list("f_forecast_var", "log_returns_sp500",
"log_returns_fste100",
"window_size",
"level",
"solnp",
"f_ineq_constraint",
"f_nll",
"ComputeHtGarch","store"))
# we use parLapply to parallelize the computation of the VaR forecast
VaR_forecast_sp500 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("SP500 windows ",i)
f_forecast_var(log_returns_sp500[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
VaR_forecast_fste100 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("FSTE100 windows ",i)
f_forecast_var(log_returns_fste100[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
stopCluster(cl)
# We convert the list of VaR forecasts into a time series
VaR_forecast_sp500_vector <- unlist(VaR_forecast_sp500)
dates <- index(log_returns_sp500)[window_size:(window_size + number_of_windows - 1)]
VaR_forecast_sp500_xts <- xts(VaR_forecast_sp500_vector, order.by = dates)
# We plot the VaR forecast and the log-returns
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("topright",           # Position of the legend
legend = c("VaR Forecast", "Returns"),  # Labels for the lines
col = c("blue", "red"), # Color of the labels
lty = 1)
lines(returns, col = 'red')
legend("topright",           # Position of the legend
legend = c("VaR Forecast", "Returns"),  # Labels for the lines
col = c("blue", "red"), # Color of the labels
lty = 1)
?legend
lines(returns, col = 'red')
legend("topright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("topright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)
par(mar=c(5, 4, 4, 5) + 0.1)  # Adjust margins; the numbers are bottom, left, top, and right margins, respectively.
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("topright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)                # Line type, 1 = solid
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
par(mar=c(5, 4, 4, 5) + 0.1)  # Adjust margins; the numbers are bottom, left, top, and right margins, respectively.
legend("topright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)
legend("bottomright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottomright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)                # Line type, 1 = solid
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)                # Line type, 1 = solid
legend("bottom",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("here")
library("xts")
library("PerformanceAnalytics")
source(here("Code/f_forecast_var.R"))
source(here("Code/functions.R"))
source(here("Tests/UGarchLib.R"))
index_prices = get(load(here("Data/indices.rda")))
start_analysis_date <-"2005-01-01/"
level = 0.95
index_prices = index_prices[start_analysis_date,]
par(mfrow = c(1,1), ## set 2 charts in 1 row
cex = 0.6) ## labels are now 60% of their normal size
log_returns_sp500 = CalculateReturns(index_prices$SP500, method = "log")[-1]
log_returns_fste100 = CalculateReturns(index_prices$FTSE100, method = "log")[-1]
log_returns = CalculateReturns(index_prices)[-1]
number_of_bins = round(10 *log(length(log_returns)))
# Compute the VaR forecast for the SP500 index
VaR_forecast_sp500 = f_forecast_var(log_returns_sp500, level = level)
VaR_forecast_sp500$GARCH_param
dates_vector <- index(index_prices)
xts_conditional_variances <- xts(VaR_forecast_sp500$ConditionalVariances, order.by = as.Date(dates_vector)+1)
# Plot the conditional variances as a time series
plot(sqrt(xts_conditional_variances), type="l",xlab = "Garch Standard Deviation", main="Garch Standard Deviation by date", col="blue")
plot(store$objective_values, type = 'l', xlab = "Iteration", ylab = "Objective Function Value",
main = "Objective Function Value Over Iterations")
rugarch_test = f_test_rugarch(log_returns_sp500,0.95)
cat("VaR and Params from implemented garch:\nVaR:", VaR_forecast_sp500$VaR, "\nParameters:", (VaR_forecast_sp500$GARCH_param), "\n")
hist(log_returns$SP500, main = "SP500 daily log-returns", col = "blue", breaks = 100)
abline(v=rugarch_test$VaR, col="blue", lwd=4 )
abline(v=VaR_forecast_sp500$VaR_Forecast, col="red", lwd=2 )
abline(v=quantile(log_returns$SP500,0.05), col="black", lwd=2 )
legend("topright", legend=c("VaR from RuGarch","VaR from Implemented Garch", "VaR from data"), col=c("blue","red", "black"), lty=1:1, cex=0.8)
print("VaR from data SP500")
quantile(log_returns$SP500,0.05)
print("Var from Garch")
VaR_forecast_sp500$VaR_Forecast
print("VaR from Rugarch")
rugarch_test$VaR
# **********************************************************************************************
# QUESTIONS ANSWERS ****************************************************************************
# **********************************************************************************************
# Use the first T = 1000 log-returns to estimate the VaR of each index at the 95% risk level. Which one
# is the most risky at the T + 1 horizon?
number_of_days = 1000
VaR_forecast_sp500 = f_forecast_var(log_returns_sp500[1:number_of_days], level = level)
cat("VaR at 95% for SP500:", VaR_forecast_sp500$VaR_Forecast, "\n")
VaR_forecast_fste100 = f_forecast_var(log_returns_fste100[1:number_of_days], level = level)
cat("VaR at 95% for FSTE100:", VaR_forecast_fste100$VaR_Forecast, "\n")
most_risky= ifelse(VaR_forecast_sp500$VaR_Forecast < VaR_forecast_fste100$VaR_Forecast, "SP500", "FSTE100")
cat("The most risky index is:", most_risky, "\n")
# Compare the VaR forecast with the actual losses
f_test_rugarch(log_returns_sp500[1:number_of_days],level)
f_test_rugarch(log_returns_fste100[1:number_of_days],level)
# **********************************************************************************************
# Using a rolling window of T = 1000 days, compute and store the next-step-ahead VaR at the 95% risk
# level for the next 1000 days.
window_size = 1000
number_of_windows = 1000
VaR_forecast_sp500 = rep(NA, number_of_windows)
VaR_forecast_fste100 = rep(NA, number_of_windows)
library("parallel")
library("Rsolnp")
cl <- makeCluster(detectCores() - 2) # Leave 2 cores free for system processes
clusterExport(cl, list("f_forecast_var", "log_returns_sp500",
"log_returns_fste100",
"window_size",
"level",
"solnp",
"f_ineq_constraint",
"f_nll",
"ComputeHtGarch","store"))
# we use parLapply to parallelize the computation of the VaR forecast
VaR_forecast_sp500 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("SP500 windows ",i)
f_forecast_var(log_returns_sp500[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
VaR_forecast_fste100 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("FSTE100 windows ",i)
f_forecast_var(log_returns_fste100[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
stopCluster(cl)
# We convert the list of VaR forecasts into a time series
VaR_forecast_sp500_vector <- unlist(VaR_forecast_sp500)
dates <- index(log_returns_sp500)[window_size:(window_size + number_of_windows - 1)]
VaR_forecast_sp500_xts <- xts(VaR_forecast_sp500_vector, order.by = dates)
# We plot the VaR forecast and the log-returns
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
png("plot_with_legend.png")
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
dev.off()
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"))
legend(col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
x<-1:10; y1=x*x; y2=2*y1
plot(x, y1, type="b", pch=19, col="red", xlab="x", ylab="y")
# Add a line
lines(x, y2, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend(col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
x<-1:10; y1=x*x; y2=2*y1
plot(x, y1, type="b", pch=19, col="red", xlab="x", ylab="y")
# Add a line
lines(x, y2, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend(col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("xts")
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("xts")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("xts")
library("quantmod")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend")
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", bg = "lightblue", cex = 0.8)
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", bg = "lightblue", cex = 0.8)
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
library("ggplot2")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
theme(plot.title = element_text(hjust=0.5))
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500"+theme(plot.title = element_text(hjust=0.5)))
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500"+ theme(plot.title = element_text(hjust=0.5)))
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4, line=-2)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
)
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4, line=-2)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4, line=-2)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500", adj = 0)
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red', main = "VaR Forecast for S&P 500", adj = 0)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red',)
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )

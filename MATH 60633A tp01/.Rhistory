lines(returns, col = 'red')
par(mar=c(5, 4, 4, 5) + 0.1)  # Adjust margins; the numbers are bottom, left, top, and right margins, respectively.
legend("topright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)
legend("bottomright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottomright",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)                # Line type, 1 = solid
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1)                # Line type, 1 = solid
legend("bottom",           # Position of the legend
col = c("blue", "red"), # Color of the labels
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("here")
library("xts")
library("PerformanceAnalytics")
source(here("Code/f_forecast_var.R"))
source(here("Code/functions.R"))
source(here("Tests/UGarchLib.R"))
index_prices = get(load(here("Data/indices.rda")))
start_analysis_date <-"2005-01-01/"
level = 0.95
index_prices = index_prices[start_analysis_date,]
par(mfrow = c(1,1), ## set 2 charts in 1 row
cex = 0.6) ## labels are now 60% of their normal size
log_returns_sp500 = CalculateReturns(index_prices$SP500, method = "log")[-1]
log_returns_fste100 = CalculateReturns(index_prices$FTSE100, method = "log")[-1]
log_returns = CalculateReturns(index_prices)[-1]
number_of_bins = round(10 *log(length(log_returns)))
# Compute the VaR forecast for the SP500 index
VaR_forecast_sp500 = f_forecast_var(log_returns_sp500, level = level)
VaR_forecast_sp500$GARCH_param
dates_vector <- index(index_prices)
xts_conditional_variances <- xts(VaR_forecast_sp500$ConditionalVariances, order.by = as.Date(dates_vector)+1)
# Plot the conditional variances as a time series
plot(sqrt(xts_conditional_variances), type="l",xlab = "Garch Standard Deviation", main="Garch Standard Deviation by date", col="blue")
plot(store$objective_values, type = 'l', xlab = "Iteration", ylab = "Objective Function Value",
main = "Objective Function Value Over Iterations")
rugarch_test = f_test_rugarch(log_returns_sp500,0.95)
cat("VaR and Params from implemented garch:\nVaR:", VaR_forecast_sp500$VaR, "\nParameters:", (VaR_forecast_sp500$GARCH_param), "\n")
hist(log_returns$SP500, main = "SP500 daily log-returns", col = "blue", breaks = 100)
abline(v=rugarch_test$VaR, col="blue", lwd=4 )
abline(v=VaR_forecast_sp500$VaR_Forecast, col="red", lwd=2 )
abline(v=quantile(log_returns$SP500,0.05), col="black", lwd=2 )
legend("topright", legend=c("VaR from RuGarch","VaR from Implemented Garch", "VaR from data"), col=c("blue","red", "black"), lty=1:1, cex=0.8)
print("VaR from data SP500")
quantile(log_returns$SP500,0.05)
print("Var from Garch")
VaR_forecast_sp500$VaR_Forecast
print("VaR from Rugarch")
rugarch_test$VaR
# **********************************************************************************************
# QUESTIONS ANSWERS ****************************************************************************
# **********************************************************************************************
# Use the first T = 1000 log-returns to estimate the VaR of each index at the 95% risk level. Which one
# is the most risky at the T + 1 horizon?
number_of_days = 1000
VaR_forecast_sp500 = f_forecast_var(log_returns_sp500[1:number_of_days], level = level)
cat("VaR at 95% for SP500:", VaR_forecast_sp500$VaR_Forecast, "\n")
VaR_forecast_fste100 = f_forecast_var(log_returns_fste100[1:number_of_days], level = level)
cat("VaR at 95% for FSTE100:", VaR_forecast_fste100$VaR_Forecast, "\n")
most_risky= ifelse(VaR_forecast_sp500$VaR_Forecast < VaR_forecast_fste100$VaR_Forecast, "SP500", "FSTE100")
cat("The most risky index is:", most_risky, "\n")
# Compare the VaR forecast with the actual losses
f_test_rugarch(log_returns_sp500[1:number_of_days],level)
f_test_rugarch(log_returns_fste100[1:number_of_days],level)
# **********************************************************************************************
# Using a rolling window of T = 1000 days, compute and store the next-step-ahead VaR at the 95% risk
# level for the next 1000 days.
window_size = 1000
number_of_windows = 1000
VaR_forecast_sp500 = rep(NA, number_of_windows)
VaR_forecast_fste100 = rep(NA, number_of_windows)
library("parallel")
library("Rsolnp")
cl <- makeCluster(detectCores() - 2) # Leave 2 cores free for system processes
clusterExport(cl, list("f_forecast_var", "log_returns_sp500",
"log_returns_fste100",
"window_size",
"level",
"solnp",
"f_ineq_constraint",
"f_nll",
"ComputeHtGarch","store"))
# we use parLapply to parallelize the computation of the VaR forecast
VaR_forecast_sp500 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("SP500 windows ",i)
f_forecast_var(log_returns_sp500[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
VaR_forecast_fste100 <- parLapply(cl, 1:number_of_windows, function(i) {
cat("FSTE100 windows ",i)
f_forecast_var(log_returns_fste100[i:(i+window_size-1)], level = 0.95)$VaR_Forecast
})
stopCluster(cl)
# We convert the list of VaR forecasts into a time series
VaR_forecast_sp500_vector <- unlist(VaR_forecast_sp500)
dates <- index(log_returns_sp500)[window_size:(window_size + number_of_windows - 1)]
VaR_forecast_sp500_xts <- xts(VaR_forecast_sp500_vector, order.by = dates)
# We plot the VaR forecast and the log-returns
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
png("plot_with_legend.png")
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
dev.off()
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom",
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"))
legend(col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
x<-1:10; y1=x*x; y2=2*y1
plot(x, y1, type="b", pch=19, col="red", xlab="x", ylab="y")
# Add a line
lines(x, y2, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend(col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
x<-1:10; y1=x*x; y2=2*y1
plot(x, y1, type="b", pch=19, col="red", xlab="x", ylab="y")
# Add a line
lines(x, y2, pch=18, col="blue", type="b", lty=2)
# Add a legend
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend(col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("xts")
plot(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("xts")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
legend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
library("xts")
library("quantmod")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom" ,
col = c("blue", "red"),
legend = c("VaR Forecast", "Returns"),
lty = 1,
title= "Legend")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend")
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", bg = "lightblue", cex = 0.8)
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", bg = "lightblue", cex = 0.8)
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("bottom", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
library("ggplot2")
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
theme(plot.title = element_text(hjust=0.5))
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500"+theme(plot.title = element_text(hjust=0.5)))
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500"+ theme(plot.title = element_text(hjust=0.5)))
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4, line=-2)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
)
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4, line=-2)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
title(main = "VaR Forecast and Returns", col.main = "black", font.main = 4, line=-2)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500", adj = 0)
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red', main = "VaR Forecast for S&P 500", adj = 0)
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red',)
plot.xts(VaR_forecast_sp500_xts, type = 'l', col = 'blue', xlab = "Window", ylab = "VaR Forecast",
main = "VaR Forecast for S&P 500")
returns=log_returns_sp500[window_size:(window_size+number_of_windows-1)]
lines(returns, col = 'red')
addLegend("topright", on = 1, col = c("blue", "red"),
legend.names = c("VaR Forecast", "Returns"),
lty = 1, cex = 0.8,
title= "Legend:", )
library("xts")
library("qrmdata")
library("mnormt")
library("MASS")
library("sn")
library("here")
library("mvtnorm")
X_1 <- qt(U_1, df = 4)
Z <- mvrnorm(n = n_sim, mu = mu, Sigma = Sigma)
library("xts")
library("qrmdata")
data("SP500", package = "qrmdata")
data("FTSE", package = "qrmdata")
data("EURSTOXX", package = "qrmdata")
data("NIKKEI", package = "qrmdata")
indices <- merge(SP500, FTSE, EURSTOXX, NIKKEI)
indices <- indices[endpoints(indices, on = "weeks"),]
rets <- 100 * PerformanceAnalytics::CalculateReturns(indices)
rets <- rets[rowSums(is.na(rets)) == 0,]
rets <- as.matrix(rets["2001-01-01/2007-12-31"])
colnames(rets) <- c("SP500", "FTSE", "EURSTOXX", "NIKKEI")
# Estimation of multivariate Student-t distribution
library("mnormt")
library("MASS")
n_df <- 50
seq_df <- seq(from = 9, to = 20, length.out = n_df)
seq_loglik <- rep(0, n_df)
for (i in 1:n_df) {
# MLE estimation of location and covariance
# MASS::cov.trob()
df <- seq_df[i]
fit <- cov.trob(rets, nu = df, cor = FALSE)
# Likelihood value. We correct for covariance <-> scale
# mnormt::dmt()
mu <- fit$center
S <- (df - 2) * fit$cov / df
seq_loglik[i] <- sum(dmt(x = rets,
mean = mu,
S = S,
df = df,
log = TRUE))
}
df_hat <- seq_df[which.max(seq_loglik)]
plot(seq_df, 2 * seq_loglik,
type = "l", ylab = "2 * loglikelihood", lwd = 2)
title("Profile likelihood")
abline(v = df_hat)
loglik <- max(seq_loglik)
aic_t <- -2 * loglik + 2 * (4 + 10 + 1)
aic_t
# MASS::cov.trob()
fit <- cov.trob(x = rets, nu = df_hat, cor = TRUE)
fit$center
## SP500 FTSE EURSTOXX NIKKEI
## 0.09935258 0.05674194 0.08694838 0.13854397
fit$cov
## SP500 FTSE EURSTOXX NIKKEI
## SP500 3.166417 2.555700 3.643540 2.244012
## FTSE 2.555700 3.148322 3.847014 2.278521
## EURSTOXX 3.643540 3.847014 6.042837 3.248469
## NIKKEI 2.244012 2.278521 3.248469 6.485059
fit$cor
## SP500 FTSE EURSTOXX NIKKEI
## SP500 1.0000000 0.8094430 0.8329503 0.4952041
## FTSE 0.8094430 1.0000000 0.8819901 0.5042622
## EURSTOXX 0.8329503 0.8819901 1.0000000 0.5189210
## NIKKEI 0.4952041 0.5042622 0.5189210 1.0000000
#3.1.2 Skew Elliptical distributions
library("sn")
# ?sn::mst.mple()
fit <- mst.mple(y = rets)
# Change the parametrization
# Convert direct parameters (DP) to centered parameters (CP) of a skew-elliptical
# distribution and vice versa.
dp2cp(fit$dp, family = "st")
## $beta
## SP500 FTSE EURSTOXX NIKKEI
## [1,] 0.02477923 -0.01480627 -0.01354006 0.05357496
##
## $var.cov
## SP500 FTSE EURSTOXX NIKKEI
## SP500 4.021571 3.236655 4.601693 2.949953
## FTSE 3.236655 3.982662 4.848340 2.997256
## EURSTOXX 4.601693 4.848340 7.620788 4.297644
## NIKKEI 2.949953 2.997256 4.297644 8.505463
##
## $gamma1
## SP500 FTSE EURSTOXX NIKKEI
## -0.5135100 -0.5059322 -0.5477758 -0.4520548
##
## $gamma2M
## gamma2M
## 17.12419
aic_skewt <- -2 * fit$logL + 2 * (4 + 10 + 4 + 1)
aic_skewt
## [1] 4491.021
#CLASS 6 - COPULAS----------------------------------------------------------------------------------------------------
#COPULAS
# Simulate random number with uniform distribution
n_sim <- 5000
set.seed(1234)
u <- runif(n_sim, min = 0, max = 1)
plot(u, type = "p", main = "Draws from uniform", pch = 20,
cex = 0.8, tck = 0)
n_bins <- round(10 * log(n_sim))
hist(u, n_bins, main = "Histogram",
xlab = "", ylab = "", tck = 0)
box()
# Simulate random number with normal distribution
x <- qnorm(p = u)
plot(x, type = "p", main = "Inversion of U with Gaussian quantile",
pch = 20, cex = 0.8, ylim = c(-4, 4), tck = 0)
hist(x, breaks = n_bins, main = "Histogram",
xlim = c(-4, 4), xlab = "", ylab = "", tck = 0)
box()
# Simulate random number with t distribution
x <- qt(u, df = 4)
plot(x, type = "p", main = "Inversion of U with Student-t quantile",
pch = 20, cex = 0.8, tck = 0)
hist(x, breaks = n_bins, main = "Histogram", xlim = c(-15, 15),
xlab = "", ylab = "", tck = 0)
# Gaussian copula-----------------------------------------------------------------------------------------------
# Grid
grid_1 <- grid_2 <- seq(from = 0.01, to = 0.99, length.out = 50)
# Parameters definition
mu <- c(1, -1) # mean return
r <- 0.5 # correlation coefficient
R <- matrix(data = c(1, r, r, 1), # correlation matrix
nrow = 2,
ncol = 2,
byrow = TRUE)
sig <- c(1, 1) # standard deviation
Sigma <- diag(sig) %*% R %*% diag(sig) # covariance matrix
# Plot the 3-d chart using the ad-hoc functions
library("here")
source(here("code", "NormalCopulaPdf.R")) # compute the pdf of a normal copula
X_1 <- qt(U_1, df = 4)
#3.1.1 Elliptical distributions
# Data preparation
library("xts")
library("qrmdata")
